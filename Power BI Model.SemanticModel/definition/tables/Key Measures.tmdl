table 'Key Measures'
	lineageTag: 29d3ed8a-9899-4986-a22b-b076a650b0b6

	measure 'Sales Ampunt' = SUM(Sales[SalesAmount])
		formatString: \$#,0.###############;-\$#,0.###############;\$#,0.###############
		lineageTag: f50f6601-d429-4529-889d-90c676c07b98

		annotation PBI_FormatHint = {"currencyCulture":"en-NZ"}

	measure 'Average Yearly Income' = AVERAGE(DimCustomer[YearlyIncome])
		formatString: \$#,0.###############;-\$#,0.###############;\$#,0.###############
		lineageTag: 5efb8eef-6058-423b-a716-da8da9956d11

		annotation PBI_FormatHint = {"currencyCulture":"en-NZ"}

	measure 'Sales Quantity' = SUM(Sales[SalesQuantity])
		formatString: #,0
		lineageTag: c3069853-17b7-4465-9c64-042a4ce73019

	measure 'Product Class' = ```
			
			    IF(
			        NOT ISEMPTY( Sales ),
			        SELECTEDVALUE(
			            'Product'[ClassName]
			        )
			)
			```
		lineageTag: 7f726fac-a6ce-4329-87e2-ceb89179a3c9

		annotation PBI_FormatHint = {"isText":true}

	measure 'Product Category' = ```
			
			    IF(
			        NOT ISEMPTY( Sales ),
			        CALCULATE(
			            SELECTEDVALUE(
			                ProductCategory[ProductCategoryName]),
			                CROSSFILTER(
			                    'Product'[ProductSubcategoryKey],
			                    ProductSubcategory[ProductSubcategoryKey],
			                    Both
			                ),
			                CROSSFILTER(
			                    ProductSubcategory[ProductCategoryKey],
			                    ProductCategory[ProductCategoryKey],
			                    Both
			            )
			    )
			)
			            
			    
			    
			```
		lineageTag: a59f5928-19c7-4fc7-bfd6-a47f780a3845

		annotation PBI_FormatHint = {"isText":true}

	measure 'Sales by Scale' = ```
			
			    DIVIDE(
			        [Sales Ampunt],
			        SELECTEDVALUE( Scale[Scale], 1 )
			)
			    
			```
		formatString: \$#,0.###############;-\$#,0.###############;\$#,0.###############
		lineageTag: bee561a7-866c-4acb-ad86-2642dcd09ccc

		annotation PBI_FormatHint = {"currencyCulture":"en-NZ"}

	measure 'Product Category1' = ```
			
			    CALCULATE(
			            SELECTEDVALUE( ProductCategory[ProductCategoryName] ),
			            'Product'
			)
			
			```
		lineageTag: d1aefd61-a26e-474c-9017-e2d1907fd541

		annotation PBI_FormatHint = {"isText":true}

	measure 'Applied filters' = ```
			
			
			VAR MaxFilters = 3
			RETURN
			
			  IF ( 
			    ISFILTERED ( 'Product'[ColorName] ), 
			    VAR ___f = FILTERS ( 'Product'[ColorName] ) 
			    VAR ___r = COUNTROWS ( ___f ) 
			    VAR ___t = TOPN ( MaxFilters, ___f, 'Product'[ColorName] )
			    VAR ___d = CONCATENATEX ( ___t, 'Product'[ColorName], ", " )
			    VAR ___x = "Color Name: " & ___d & IF(___r > MaxFilters, ", ... [" & ___r & " items selected]") & " " 
			    RETURN ___x & UNICHAR(13) & UNICHAR(10)
			)
			
			
			
			```
		lineageTag: 29a43677-7280-4423-8247-cf7af491fabf

	partition 'Key Measures-e72b28dd-a78b-4ea4-bd9d-9fa3ca8e53a0' = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

